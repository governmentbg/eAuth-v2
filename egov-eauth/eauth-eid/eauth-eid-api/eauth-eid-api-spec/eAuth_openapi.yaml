openapi: 3.0.2
info:
  description:  >-
    Simple API for Identity vendor integration.<br/> Re-use similar
    Authentication as Vendor servers <br/> <hr> <br /> <b>Each call must provide
    an Authorization Header parameter</b> <br />On every request you have to set
    a HTTP header parameter "authorize_key". Below you can find an example, how
    to generate such a parameter. <h4>EXAMPLE</h4> <i><u>Input Data</u></i> <br/>
    Vendor Key - 7f4b9ef3-298d-4ced-8656-a5d8b7f96666 <br />
    Vendor ID -  ahZsmRHbDHL6TeED <br/>
    Each Vendor receive its unique Key and ID provided by DAEU. <br /> <br />
    DATA (the request you want to send through the API) <br/>
    {"vendorID":"ahZsmRHbDHL6TeED","userIdentificationNumber":"8611048980"}<br/> 
    <i><u>Generate "authorize_key" header</u></i> 
    <br />DATA_TO_HEX <br/>
    7b2276656e646f724e756d626572223a2261685a736d52486244484c3654654544222c22757<br/>
    365724964656e74696669636174696f6e4e756d626572223a2238363131303438393830227d<br/> 
    <br />VENDOR_KEY_2_SHA256 = SHA256(VENDOR_KEY) <br/>
    05f1a4f713f589ec6126e6161255649eca830a32ce55f3ec2fa9268c9add8d69 <br/>
    <br />authorize_key = HMAC(SHA256, DATA_TO_HEX, VENDOR_KEY_2_SHA256) <br/>
    c38babb38a5498deae40e8d71c101156242ab6a6f019290d16b62e0da9ad2cc2<br />

  version: 1.1.0
  title: RestFul eAuth API
  termsOfService: http://swagger.io/terms/
  contact:
    email: strahil.vitkov@bul-si.bg
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: eAuth API
    description: Prototype for service API
    externalDocs:
      description: Access the full functionality at
      url: https://eauth.egov.bg
paths:
  /exIdent/inquiry:
    post:
      tags:
        - Identity Inquiry
      summary: Initialize Authentication at IP
      description: Initialize Authentication at IP
      operationId: identityInquiry
      security:
        - vendor_id: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationRequest"
        description: Authentication Request
        required: true
      callbacks:   # Callback definition
        authIdentityResult:   # Event name
          '{$request.body#/callbackUrl}':   # The callback URL,
            post:
              operationId: authIdentityResultCallback
              requestBody:   # Contents of the callback message
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/AuthenticationCallbackResult'
              responses:   # Expected responses to the callback message
                "200":
                  description: Callback Request with authentication result accepted successfuly
                  content:
                    application/json:
                      schema:
                        type: string
                        example: authentication accepted successfuly
                "409":
                  $ref: '#/components/responses/409_Conflict'
                "500":
                  $ref: "#/components/responses/500_ServerError"
      responses:
        "200":
          description: Request accepted successfuly
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InquiryResult"
        "400":
          $ref: '#/components/responses/400_InvalidRequest'
        "401":
          $ref: "#/components/responses/401_Unauthorized"
        "405":
          $ref: '#/components/responses/405_NotAllowed'
        "404":
          $ref: "#/components/responses/404_NotFound"
        "500":
          $ref: "#/components/responses/500_ServerError"
          
  "/exIdent/signed/addAtt/{relyingPartyRequestID}":
    put:
      tags:
        - Additional Identification Attributes
      summary: Update an existing authentication request with requested by Provider additional attributes
      description: Called only if AuthenticationRequest->identificationАttributes has values
      operationId: identityAddAttributes
      security:
        - vendor_id: []
        - api_key: []
      parameters:
        - name: relyingPartyRequestID
          in: path
          description: Correlation ID genereate on initial request
          required: true
          schema:
            type: string
            format: base64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeMap"
        description: Additional Authentication paramenters
        required: true
      responses:
        "200":
          description: Request accepted successfuly
          content:
            application/json:
              schema:
                type: string
                example: Attributes accepted
        "400":
          $ref: '#/components/responses/400_InvalidRequest'
        "401":
          $ref: "#/components/responses/401_Unauthorized"
        "405":
          $ref: "#/components/responses/405_NotAllowed"
        "409":
          $ref: '#/components/responses/409_Conflict'
        "500":
          $ref: "#/components/responses/500_ServerError"
        "501":
          $ref: "#/components/responses/501_NotImplemented"

  "/exIdent/signed/result/{relyingPartyRequestID}":
    get:
      tags:
        - Authentication result
      summary: Get authentication result
      description: Multiple calls are possible until retrieving the result
      operationId: getAuthentication
      security:
        - vendor_id: []
        - api_key: []
      parameters:
        - name: relyingPartyRequestID
          in: path
          description: Correlation ID genereate on initial request
          required: true
          schema:
            type: string
            format: base64
      responses:
        "200":
          description: Request successfuly processed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"
        "203":
          $ref: "#/components/responses/203_NotReady"
        "400":
          $ref: '#/components/responses/400_InvalidRequest'
        "401":
          $ref: "#/components/responses/401_Unauthorized"
        "404":
          $ref: "#/components/responses/404_NotFound"
        "409":
          $ref: "#/components/responses/409_Conflict"
        "501":
          $ref: "#/components/responses/501_NotImplemented"
         
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: @eid.service.host@
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: authorize_key
      in: header
    vendor_id:
      type: apiKey
      name: vendor_id
      in: header
  schemas:
    AuthenticationRequest:
      type: object
      required:
        - requestedResource
        - requestSystem
        - user
      properties:
        requestedResource:
          type: string
          description: Contains text describing the resource/service the user want to access.
        requestSystem:
          type: string
          description: Contains text description of the target system.
        relayState:
          type: string
          description: SP origin of the authentication. 
        processing:   
          $ref: "#/components/schemas/ProcessingData"
        levelOfAssurance:
          $ref: "#/components/schemas/LevelOfAssurance"
        user:
          $ref: "#/components/schemas/UserAuthData"
        requestedAddAuthAttributes:
          type: array
          default: []
          xml:
            name: attribute
            wrapped: true
          items:
            $ref: "#/components/schemas/AssertionAttributeType"
          example: [ "urn:egov:bg:eauth:2.0:attributes:email" ]
    AttributeMap:
      type: object
      additionalProperties:
        type: string
        xml:
          name: atribute
          wrapped: true 
    AssertionAttributeType:
      type: string
      description: All supported assertion attribute for the authenticated person
      enum:
        - urn:egov:bg:eauth:2.0:attributes:personIdentifier
        - urn:egov:bg:eauth:2.0:attributes:personName
        - urn:egov:bg:eauth:2.0:attributes:email
        - urn:egov:bg:eauth:2.0:attributes:phone
        - urn:egov:bg:eauth:2.0:attributes:latinName
        - urn:egov:bg:eauth:2.0:attributes:birthName
        - urn:egov:bg:eauth:2.0:attributes:dateOfBirth
        - urn:egov:bg:eauth:2.0:attributes:gender
        - urn:egov:bg:eauth:2.0:attributes:placeOfBirth
        - urn:egov:bg:eauth:2.0:attributes:X509
        - urn:egov:bg:eauth:2.0:attributes:canonicalResidenceAddress
    AssertionAttributeValue:
      type: object
      description: "For the authenticated person contains attrubute velues for requested attrribute keys in AuthenticationRequest -> requestedAddAuthAttributes"
      properties:
        attribute:
          $ref: "#/components/schemas/AssertionAttributeType"
        value:
          type: string
    LevelOfAssurance:
      type: string
      description: Available standart EU assurance level
      enum:
        - LOW
        - SUBSTANTIAL
        - HIGH
    AuthProcessingType:
      type: string
      description: Supported authentication processing workflows.  
      enum:
        - POLLING 
        - CALLBACK
      default: POLLING
    ProcessingData:
      type: object
      description: Hold all processin details for this authentication request
      properties:
        ptype:
          $ref: "#/components/schemas/AuthProcessingType"
        responceTimeout:
          type: string
          format: date-time
        callbackUrl:   # Callback URL! If Provided eAuth will exprect, an authtentication result on callback service and will not poll for responce at "/exIdent/signed/result/{relyingPartyRequestID}"
          type: string
          format: uri
          default: null
          example: null
      
    AuthenticationResponse:
      type: object
      properties:
        id:
          type: string
        relayState:
          type: string
        issuer:
          type: string
        clientIpAddress:
          type: string
        subjectAssertions:
          type: array
          description: >+
            Contains values of all assertion sttributes for the identifies person. <br/>
            For succesfull authenticaton Identity provider must provide mandatory attleeast two attributes<br/><br/>
            1. "urn:egov:bg:eauth:2.0:attributes:personIdentifier"<br/>
            Identifier of the authenticated user<br/>
            Тhe identifier shall be expressed using the following structure for the corresponding character string in the presented order<br/> 
            a) 3 character natural person identity type reference, having one of the following defined values<br/>
            I.   \"PAS\" for identification based on passport number;<br/>
            II. \"IDC\" for identification based on national identity card number; <br/>
            III.\"PNO\" for identification based on (national) personal number (national civic registration number); or<br/>
            IV.  \"TIN\" Tax Identification Number according to the European Commission - Tax and Customs Union <br/>
            (http://ec.europa.eu/taxation_customs/tin/tinByCountry.html). <br/>
            V.   \"VAT\" for identification based on a national value added tax identification number; or <br/>
            VI. \"NTR\" for identification based on an identifier from a national register, e.g. a national trade register.<br/>
            b) 2 character ISO 3166-1 [15] country code; <br/>
            c) hyphen-minus "-" (0x2D (ASCII), U+002D (UTF-8)); and <br/>
            d) identifier (according to country and identity type reference).<br/><br/>
            2. "urn:egov:bg:eauth:2.0:attributes:personName" Full name of the authenticated person.
          uniqueItems: true
          xml:
            name: assertion
            wrapped: true
          items:
            $ref: "#/components/schemas/AssertionAttributeValue"
          example: [{ "attribute": "urn:egov:bg:eauth:2.0:attributes:personIdentifier", "value": "PNOBG-1010101010" },{ "attribute": "urn:egov:bg:eauth:2.0:attributes:personName", "value": "Дафинка Петрова" }]
        inResponseToId:
          type: string
          description: relyingPartyRequestID of this response
        levelOfAssurance:
          $ref: "#/components/schemas/LevelOfAssurance"
    AuthenticationCallbackResult:
      type: object
      properties:
        relyingPartyRequestID:
          description: Correlation ID genereate on initial request
          type: string
          format: base64
        success:
          type: boolean
        errorMessage: 
          type: string
        authResult:
          $ref: "#/components/schemas/AuthenticationResponse"
      required:
        - relyingPartyRequestID
        - authResult
       
    UserAuthData:
      type: object
      description: Provide user authentication data id needed
      required:
        - identityString
        - authenticationString
      properties:
        identityString:
          type: string
        authenticationString:
          type: string
          format: base64
    InquiryResult:
      type: object
      description: Holds authentication polling data
      properties:
        relyingPartyRequestID:
          type: string
          format: base64
        validity:
          type: string
          format: date-time
        requiredAdditionalAttributes:
          type: array
          xml:
            name: attribute
            wrapped: true
          items:
            type: string
    CommonAuthException:
      type: object
      properties:
        failure:
          type: boolean
        cause:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
              message:
                type: string    
            required:
            - code
            - message                  
      xml:
        name: authException
        wrapped: true
        
    ProcessingException:        
      allOf:     # Combines the CommonAuthException and the inline model
        - $ref: '#/components/schemas/CommonAuthException'
        - type: object
          required:
            - retryAfter
          properties:
            retryAfter:
              type: integer
              description: an optional parameter that specifies the required time in seconds to wait between requests
  responses:
    203_NotReady: # Can be referenced as '#/components/responses/203_NotReady'
      description: Request is accepted, but still in processing.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProcessingException'
        application/xml:
          schema:
            $ref: '#/components/schemas/ProcessingException'
    400_InvalidRequest:  # Can be referenced as '#/components/responses/400_InvalidRequest'
      description: Bad Request, user can change it and resubmit new correct request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
        application/xml:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
    401_Unauthorized: # Can be referenced as '#/components/responses/401_Unauthorized'
      description: API key is missing or invalid.
      headers:
        WWW_Authenticate:
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
        application/xml:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
    403_Refusesed: # Can be referenced as '#/components/responses/403_Refusesed'
      description: Server refusing to give the requested resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
        application/xml:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
    404_NotFound: # Can be referenced as '#/components/responses/404_NotFound'
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
        application/xml:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
    405_NotAllowed: # Can be referenced as '#/components/responses/405_NotAllowed'
      description: Invalid request or not allowed method.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
        application/xml:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
    409_Conflict: # Can be referenced as '#/components/responses/409_Conflict'
      description: There is a conflict within this request. The user might be able to resolve the conflict and resubmit the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProcessingException'
        application/xml:
          schema:
            $ref: '#/components/schemas/ProcessingException'
    410_Gone: # Can be referenced as '#/components/responses/410_Gone'
      description: Resource is no longer available.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
        application/xml:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
    500_ServerError: # Can be referenced as '#/components/responses/500_ServerError'
      description: The server encountered an unexpected exception.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProcessingException'
        application/xml:
          schema:
            $ref: '#/components/schemas/ProcessingException'
    501_NotImplemented: # Can be referenced as '#/components/responses/501_NotImplemented'
      description: The specified resource is not yet implemented.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
        application/xml:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
    502_IntegrationError: # Can be referenced as '#/components/responses/502_IntegrationError'
      description: Received an invalid response from an inbound server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
        application/xml:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
    503_ServiceUnavailable: # Can be referenced as '#/components/responses/503_ServiceUnavailable'
      description: The  service is currently unavailable or the server is not ready to handle the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
        application/xml:
          schema:
            $ref: '#/components/schemas/CommonAuthException'
            
